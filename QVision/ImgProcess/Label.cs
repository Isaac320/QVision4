// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: label.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Aq.Aidi {

  /// <summary>Holder for reflection information generated from label.proto</summary>
  public static partial class LabelReflection {

    #region Descriptor
    /// <summary>File descriptor for label.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LabelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtsYWJlbC5wcm90bxIHYXEuYWlkaRoZZ29vZ2xlL3Byb3RvYnVmL2FueS5w",
            "cm90byIfCgdQb2ludDJmEgkKAXgYASABKAISCQoBeRgCIAEoAiInCgZTaXpl",
            "MmYSDQoFd2lkdGgYASABKAISDgoGaGVpZ2h0GAIgASgCIuIBCghLZXlQb2lu",
            "dBIiCghsb2NhdGlvbhgBIAEoCzIQLmFxLmFpZGkuUG9pbnQyZhIMCgRuYW1l",
            "GAIgASgJEg0KBXNjb3JlGAMgASgCEg0KBWFuZ2xlGAQgASgCEg4KBnJhZGl1",
            "cxgFIAEoAhIwCghleHRfaW5mbxgPIAMoCzIeLmFxLmFpZGkuS2V5UG9pbnQu",
            "RXh0SW5mb0VudHJ5GkQKDEV4dEluZm9FbnRyeRILCgNrZXkYASABKAkSIwoF",
            "dmFsdWUYAiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55OgI4ASIoCgRSaW5n",
            "EiAKBnBvaW50cxgBIAMoCzIQLmFxLmFpZGkuUG9pbnQyZiJGCgdQb2x5Z29u",
            "EhwKBW91dGVyGAEgASgLMg0uYXEuYWlkaS5SaW5nEh0KBmlubmVycxgCIAMo",
            "CzINLmFxLmFpZGkuUmluZyLlAQoGUmVnaW9uEiEKB3BvbHlnb24YASABKAsy",
            "EC5hcS5haWRpLlBvbHlnb24SDAoEbmFtZRgCIAEoCRINCgVzY29yZRgDIAEo",
            "AhIlCgprZXlfcG9pbnRzGAQgAygLMhEuYXEuYWlkaS5LZXlQb2ludBIuCghl",
            "eHRfaW5mbxgPIAMoCzIcLmFxLmFpZGkuUmVnaW9uLkV4dEluZm9FbnRyeRpE",
            "CgxFeHRJbmZvRW50cnkSCwoDa2V5GAEgASgJEiMKBXZhbHVlGAIgASgLMhQu",
            "Z29vZ2xlLnByb3RvYnVmLkFueToCOAEiqgMKBUxhYmVsEjAKDGRhdGFzZXRf",
            "dHlwZRgBIAEoDjIaLmFxLmFpZGkuTGFiZWwuRGF0YVNldFR5cGUSIQoIaW1n",
            "X3NpemUYAiABKAsyDy5hcS5haWRpLlNpemUyZhIMCgRuYW1lGAMgASgJEg0K",
            "BXNjb3JlGAQgASgCEiAKB3JlZ2lvbnMYBSADKAsyDy5hcS5haWRpLlJlZ2lv",
            "bhIfCgVtYXNrcxgGIAMoCzIQLmFxLmFpZGkuUG9seWdvbhIjCgloYXJkY2Fz",
            "ZXMYByADKAsyEC5hcS5haWRpLlBvbHlnb24SLQoIZXh0X2luZm8YDyADKAsy",
            "Gy5hcS5haWRpLkxhYmVsLkV4dEluZm9FbnRyeRpECgxFeHRJbmZvRW50cnkS",
            "CwoDa2V5GAEgASgJEiMKBXZhbHVlGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVm",
            "LkFueToCOAEiUgoLRGF0YVNldFR5cGUSCwoHVW5rbm93bhAAEgsKB1NlZ21l",
            "bnQQARINCglEZXRlY3Rpb24QAhIMCghDbGFzc2lmeRADEgwKCExvY2F0aW9u",
            "EARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Aq.Aidi.Point2f), global::Aq.Aidi.Point2f.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aq.Aidi.Size2f), global::Aq.Aidi.Size2f.Parser, new[]{ "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aq.Aidi.KeyPoint), global::Aq.Aidi.KeyPoint.Parser, new[]{ "Location", "Name", "Score", "Angle", "Radius", "ExtInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aq.Aidi.Ring), global::Aq.Aidi.Ring.Parser, new[]{ "Points" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aq.Aidi.Polygon), global::Aq.Aidi.Polygon.Parser, new[]{ "Outer", "Inners" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aq.Aidi.Region), global::Aq.Aidi.Region.Parser, new[]{ "Polygon", "Name", "Score", "KeyPoints", "ExtInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aq.Aidi.Label), global::Aq.Aidi.Label.Parser, new[]{ "DatasetType", "ImgSize", "Name", "Score", "Regions", "Masks", "Hardcases", "ExtInfo" }, null, new[]{ typeof(global::Aq.Aidi.Label.Types.DataSetType) }, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Point2f : pb::IMessage<Point2f> {
    private static readonly pb::MessageParser<Point2f> _parser = new pb::MessageParser<Point2f>(() => new Point2f());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point2f> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aq.Aidi.LabelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2f() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2f(Point2f other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2f Clone() {
      return new Point2f(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point2f);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point2f other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point2f other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Size2f : pb::IMessage<Size2f> {
    private static readonly pb::MessageParser<Size2f> _parser = new pb::MessageParser<Size2f>(() => new Size2f());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Size2f> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aq.Aidi.LabelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Size2f() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Size2f(Size2f other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Size2f Clone() {
      return new Size2f(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private float width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Size2f);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Size2f other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (Height != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Width);
      }
      if (Height != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Size2f other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Width = input.ReadFloat();
            break;
          }
          case 21: {
            Height = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 关键点，包含一个坐标以及其他附加信息
  /// </summary>
  public sealed partial class KeyPoint : pb::IMessage<KeyPoint> {
    private static readonly pb::MessageParser<KeyPoint> _parser = new pb::MessageParser<KeyPoint>(() => new KeyPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aq.Aidi.LabelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyPoint(KeyPoint other) : this() {
      Location = other.location_ != null ? other.Location.Clone() : null;
      name_ = other.name_;
      score_ = other.score_;
      angle_ = other.angle_;
      radius_ = other.radius_;
      extInfo_ = other.extInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyPoint Clone() {
      return new KeyPoint(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Aq.Aidi.Point2f location_;
    /// <summary>
    /// 关键点定位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aq.Aidi.Point2f Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 关键点名称/类别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private float score_;
    /// <summary>
    /// 置信度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 4;
    private float angle_;
    /// <summary>
    /// 角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 5;
    private float radius_;
    /// <summary>
    /// 半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "ext_info" field.</summary>
    public const int ExtInfoFieldNumber = 15;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extInfo_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 122);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extInfo_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    ///扩展字段，用作临时或局部扩展
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> ExtInfo {
      get { return extInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Score, other.Score)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (!ExtInfo.Equals(other.ExtInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Score);
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      hash ^= ExtInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Score != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Score);
      }
      if (Angle != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Angle);
      }
      if (Radius != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Radius);
      }
      extInfo_.WriteTo(output, _map_extInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      size += extInfo_.CalculateSize(_map_extInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyPoint other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Aq.Aidi.Point2f();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      extInfo_.Add(other.extInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (location_ == null) {
              location_ = new global::Aq.Aidi.Point2f();
            }
            input.ReadMessage(location_);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            Score = input.ReadFloat();
            break;
          }
          case 37: {
            Angle = input.ReadFloat();
            break;
          }
          case 45: {
            Radius = input.ReadFloat();
            break;
          }
          case 122: {
            extInfo_.AddEntriesFrom(input, _map_extInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 环， 概念来源于OGC(Open Geospatial Consortium)，此处简化定义为二维平面中的
  /// 有向（顺时针/逆时针）的不自相交（也不可自相切）的点的序列, 由于方向可以通过点序列计算出来，
  /// 故暂且省略方向。OGC标准中涉及到环是否闭合（首个点与最后一个点的位置相同），
  /// 此处规定首尾两点位置不应该相同，在必要时可以自动将首尾点相连。
  /// </summary>
  public sealed partial class Ring : pb::IMessage<Ring> {
    private static readonly pb::MessageParser<Ring> _parser = new pb::MessageParser<Ring>(() => new Ring());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ring> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aq.Aidi.LabelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ring() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ring(Ring other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ring Clone() {
      return new Ring(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Aq.Aidi.Point2f> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Aq.Aidi.Point2f.Parser);
    private readonly pbc::RepeatedField<global::Aq.Aidi.Point2f> points_ = new pbc::RepeatedField<global::Aq.Aidi.Point2f>();
    /// <summary>
    ///bool clock_wise = 2 [default = false]; // True => 顺时针， False => 逆时针
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aq.Aidi.Point2f> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ring);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ring other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ring other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 多边形， 参考OGC标准，定义为由一个外环和n(n=0, 1, 2, ...)个内环组成的平面几何图形，
  /// 内环应在外环内部（可以相切，但不相交），内环之间互不相交（可以相切），互不包含。
  /// OGC标准还规定了内环与外环的方向应当相反，但由于方向可自动纠正，故暂且省略。
  /// </summary>
  public sealed partial class Polygon : pb::IMessage<Polygon> {
    private static readonly pb::MessageParser<Polygon> _parser = new pb::MessageParser<Polygon>(() => new Polygon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Polygon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aq.Aidi.LabelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon(Polygon other) : this() {
      Outer = other.outer_ != null ? other.Outer.Clone() : null;
      inners_ = other.inners_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon Clone() {
      return new Polygon(this);
    }

    /// <summary>Field number for the "outer" field.</summary>
    public const int OuterFieldNumber = 1;
    private global::Aq.Aidi.Ring outer_;
    /// <summary>
    ///区域外部边框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aq.Aidi.Ring Outer {
      get { return outer_; }
      set {
        outer_ = value;
      }
    }

    /// <summary>Field number for the "inners" field.</summary>
    public const int InnersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Aq.Aidi.Ring> _repeated_inners_codec
        = pb::FieldCodec.ForMessage(18, global::Aq.Aidi.Ring.Parser);
    private readonly pbc::RepeatedField<global::Aq.Aidi.Ring> inners_ = new pbc::RepeatedField<global::Aq.Aidi.Ring>();
    /// <summary>
    ///区域内部边框, 仅供有孔洞的区域使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aq.Aidi.Ring> Inners {
      get { return inners_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Polygon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Polygon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Outer, other.Outer)) return false;
      if(!inners_.Equals(other.inners_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (outer_ != null) hash ^= Outer.GetHashCode();
      hash ^= inners_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (outer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Outer);
      }
      inners_.WriteTo(output, _repeated_inners_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (outer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Outer);
      }
      size += inners_.CalculateSize(_repeated_inners_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Polygon other) {
      if (other == null) {
        return;
      }
      if (other.outer_ != null) {
        if (outer_ == null) {
          outer_ = new global::Aq.Aidi.Ring();
        }
        Outer.MergeFrom(other.Outer);
      }
      inners_.Add(other.inners_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (outer_ == null) {
              outer_ = new global::Aq.Aidi.Ring();
            }
            input.ReadMessage(outer_);
            break;
          }
          case 18: {
            inners_.AddEntriesFrom(input, _repeated_inners_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 区域，定义为平面上的一个多边形以及定位在该多边形内部的附加信息所组成的信息区。
  /// 这个多边形限定了定位在该区域内部的附加信息的最大作用边界。
  /// 所谓最大作用边界是指，对于边界以外的图像区域做任意修改，都不会影响边界内的图像语义。
  /// </summary>
  public sealed partial class Region : pb::IMessage<Region> {
    private static readonly pb::MessageParser<Region> _parser = new pb::MessageParser<Region>(() => new Region());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Region> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aq.Aidi.LabelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region(Region other) : this() {
      Polygon = other.polygon_ != null ? other.Polygon.Clone() : null;
      name_ = other.name_;
      score_ = other.score_;
      keyPoints_ = other.keyPoints_.Clone();
      extInfo_ = other.extInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region Clone() {
      return new Region(this);
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 1;
    private global::Aq.Aidi.Polygon polygon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aq.Aidi.Polygon Polygon {
      get { return polygon_; }
      set {
        polygon_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///普通标注区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private float score_;
    /// <summary>
    ///置信度分数， 通常情况下，标注的置信度为1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "key_points" field.</summary>
    public const int KeyPointsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Aq.Aidi.KeyPoint> _repeated_keyPoints_codec
        = pb::FieldCodec.ForMessage(34, global::Aq.Aidi.KeyPoint.Parser);
    private readonly pbc::RepeatedField<global::Aq.Aidi.KeyPoint> keyPoints_ = new pbc::RepeatedField<global::Aq.Aidi.KeyPoint>();
    /// <summary>
    ///区域内所包含的关键点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aq.Aidi.KeyPoint> KeyPoints {
      get { return keyPoints_; }
    }

    /// <summary>Field number for the "ext_info" field.</summary>
    public const int ExtInfoFieldNumber = 15;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extInfo_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 122);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extInfo_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    ///扩展字段，用作临时或局部扩展
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> ExtInfo {
      get { return extInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Region);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Region other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Polygon, other.Polygon)) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Score, other.Score)) return false;
      if(!keyPoints_.Equals(other.keyPoints_)) return false;
      if (!ExtInfo.Equals(other.ExtInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (polygon_ != null) hash ^= Polygon.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Score);
      hash ^= keyPoints_.GetHashCode();
      hash ^= ExtInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (polygon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Polygon);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Score != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Score);
      }
      keyPoints_.WriteTo(output, _repeated_keyPoints_codec);
      extInfo_.WriteTo(output, _map_extInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (polygon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      size += keyPoints_.CalculateSize(_repeated_keyPoints_codec);
      size += extInfo_.CalculateSize(_map_extInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Region other) {
      if (other == null) {
        return;
      }
      if (other.polygon_ != null) {
        if (polygon_ == null) {
          polygon_ = new global::Aq.Aidi.Polygon();
        }
        Polygon.MergeFrom(other.Polygon);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      keyPoints_.Add(other.keyPoints_);
      extInfo_.Add(other.extInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (polygon_ == null) {
              polygon_ = new global::Aq.Aidi.Polygon();
            }
            input.ReadMessage(polygon_);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            Score = input.ReadFloat();
            break;
          }
          case 34: {
            keyPoints_.AddEntriesFrom(input, _repeated_keyPoints_codec);
            break;
          }
          case 122: {
            extInfo_.AddEntriesFrom(input, _map_extInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Label : pb::IMessage<Label> {
    private static readonly pb::MessageParser<Label> _parser = new pb::MessageParser<Label>(() => new Label());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Label> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aq.Aidi.LabelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label(Label other) : this() {
      datasetType_ = other.datasetType_;
      ImgSize = other.imgSize_ != null ? other.ImgSize.Clone() : null;
      name_ = other.name_;
      score_ = other.score_;
      regions_ = other.regions_.Clone();
      masks_ = other.masks_.Clone();
      hardcases_ = other.hardcases_.Clone();
      extInfo_ = other.extInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label Clone() {
      return new Label(this);
    }

    /// <summary>Field number for the "dataset_type" field.</summary>
    public const int DatasetTypeFieldNumber = 1;
    private global::Aq.Aidi.Label.Types.DataSetType datasetType_ = 0;
    /// <summary>
    ///数据集类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aq.Aidi.Label.Types.DataSetType DatasetType {
      get { return datasetType_; }
      set {
        datasetType_ = value;
      }
    }

    /// <summary>Field number for the "img_size" field.</summary>
    public const int ImgSizeFieldNumber = 2;
    private global::Aq.Aidi.Size2f imgSize_;
    /// <summary>
    ///全局信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aq.Aidi.Size2f ImgSize {
      get { return imgSize_; }
      set {
        imgSize_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 图片类别, 暂未使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private float score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "regions" field.</summary>
    public const int RegionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Aq.Aidi.Region> _repeated_regions_codec
        = pb::FieldCodec.ForMessage(42, global::Aq.Aidi.Region.Parser);
    private readonly pbc::RepeatedField<global::Aq.Aidi.Region> regions_ = new pbc::RepeatedField<global::Aq.Aidi.Region>();
    /// <summary>
    ///普通标注区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aq.Aidi.Region> Regions {
      get { return regions_; }
    }

    /// <summary>Field number for the "masks" field.</summary>
    public const int MasksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Aq.Aidi.Polygon> _repeated_masks_codec
        = pb::FieldCodec.ForMessage(50, global::Aq.Aidi.Polygon.Parser);
    private readonly pbc::RepeatedField<global::Aq.Aidi.Polygon> masks_ = new pbc::RepeatedField<global::Aq.Aidi.Polygon>();
    /// <summary>
    ///单张图像掩码区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aq.Aidi.Polygon> Masks {
      get { return masks_; }
    }

    /// <summary>Field number for the "hardcases" field.</summary>
    public const int HardcasesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Aq.Aidi.Polygon> _repeated_hardcases_codec
        = pb::FieldCodec.ForMessage(58, global::Aq.Aidi.Polygon.Parser);
    private readonly pbc::RepeatedField<global::Aq.Aidi.Polygon> hardcases_ = new pbc::RepeatedField<global::Aq.Aidi.Polygon>();
    /// <summary>
    ///训练时需要特别关注的困难区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aq.Aidi.Polygon> Hardcases {
      get { return hardcases_; }
    }

    /// <summary>Field number for the "ext_info" field.</summary>
    public const int ExtInfoFieldNumber = 15;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extInfo_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 122);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extInfo_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    ///扩展字段，用作临时或局部扩展
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> ExtInfo {
      get { return extInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Label);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Label other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatasetType != other.DatasetType) return false;
      if (!object.Equals(ImgSize, other.ImgSize)) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Score, other.Score)) return false;
      if(!regions_.Equals(other.regions_)) return false;
      if(!masks_.Equals(other.masks_)) return false;
      if(!hardcases_.Equals(other.hardcases_)) return false;
      if (!ExtInfo.Equals(other.ExtInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatasetType != 0) hash ^= DatasetType.GetHashCode();
      if (imgSize_ != null) hash ^= ImgSize.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Score);
      hash ^= regions_.GetHashCode();
      hash ^= masks_.GetHashCode();
      hash ^= hardcases_.GetHashCode();
      hash ^= ExtInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DatasetType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DatasetType);
      }
      if (imgSize_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ImgSize);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Score != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Score);
      }
      regions_.WriteTo(output, _repeated_regions_codec);
      masks_.WriteTo(output, _repeated_masks_codec);
      hardcases_.WriteTo(output, _repeated_hardcases_codec);
      extInfo_.WriteTo(output, _map_extInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatasetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DatasetType);
      }
      if (imgSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImgSize);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      size += regions_.CalculateSize(_repeated_regions_codec);
      size += masks_.CalculateSize(_repeated_masks_codec);
      size += hardcases_.CalculateSize(_repeated_hardcases_codec);
      size += extInfo_.CalculateSize(_map_extInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Label other) {
      if (other == null) {
        return;
      }
      if (other.DatasetType != 0) {
        DatasetType = other.DatasetType;
      }
      if (other.imgSize_ != null) {
        if (imgSize_ == null) {
          imgSize_ = new global::Aq.Aidi.Size2f();
        }
        ImgSize.MergeFrom(other.ImgSize);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      regions_.Add(other.regions_);
      masks_.Add(other.masks_);
      hardcases_.Add(other.hardcases_);
      extInfo_.Add(other.extInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            datasetType_ = (global::Aq.Aidi.Label.Types.DataSetType) input.ReadEnum();
            break;
          }
          case 18: {
            if (imgSize_ == null) {
              imgSize_ = new global::Aq.Aidi.Size2f();
            }
            input.ReadMessage(imgSize_);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 37: {
            Score = input.ReadFloat();
            break;
          }
          case 42: {
            regions_.AddEntriesFrom(input, _repeated_regions_codec);
            break;
          }
          case 50: {
            masks_.AddEntriesFrom(input, _repeated_masks_codec);
            break;
          }
          case 58: {
            hardcases_.AddEntriesFrom(input, _repeated_hardcases_codec);
            break;
          }
          case 122: {
            extInfo_.AddEntriesFrom(input, _map_extInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Label message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DataSetType {
        /// <summary>
        ///默认为未知类型，数据集类型未知可能导致标签无法正确处理
        /// </summary>
        [pbr::OriginalName("Unknown")] Unknown = 0,
        /// <summary>
        /// 分割模块
        /// </summary>
        [pbr::OriginalName("Segment")] Segment = 1,
        /// <summary>
        /// 检测、快速检测模块
        /// </summary>
        [pbr::OriginalName("Detection")] Detection = 2,
        /// <summary>
        /// 分类模块
        /// </summary>
        [pbr::OriginalName("Classify")] Classify = 3,
        /// <summary>
        /// 定位模块
        /// </summary>
        [pbr::OriginalName("Location")] Location = 4,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
